<html>
<head>
<style>
body {
  font-family: Arial;
  font-size: 12px;
  /*
  background: rgba(0,0,0,0.9);
  color: white;
  */
}
.container {
  margin: 0 auto;
  max-width: 800px;
  padding: 50px;
}
.container input {
  padding: 8px;
  font-size: 14px;
  width: 100%;
}
.row label {
  padding: 5px 2px;
  display: block;
  font-size: 12px;
}
.row {
  padding: 20px 0;
  display: flex;
}
.row .col.img {
  width: 200px; 
  margin-left: 10px;
}
.row .col.img img {
  width: 100%;
}
pre {
  background: rgba(0,0,0,0.8);
  color: white;
  padding: 5px;
}
h1 {
  font-size: 50px;
  margin: 0;
  max-width: 800px;
  word-wrap: break-word;
}
h2 {
  font-size: 30px;
  margin: 0;
}
.center {
  text-align: center;
}
h3 {
  margin: 5px 0;
}
button:hover {
  cursor: pointer;
  opacity: 0.8;
}
button:focus, input:focus {
  outline: none;
  opacity: 0.8;
}
button.selected {
  background: silver;
}
.flexible {
  flex-grow: 1;
}
.endpoints_header {
  padding: 20px 0;
}
.endpoint {
  display: flex;
  padding: 10px 0;
  font-family: Menlo, monaco, monospace;
  font-size: 12px;
  border-top: 1px solid rgba(0,0,0,0.07);
}
.endpoint button {
  width: 100px;
  padding: 5px;
  /*
  background: #84BF04;
  color: white;
  */
  background: burlywood;
  border: 1px solid rgba(0,0,0,0.2);
  color: rgba(0,0,0,0.8);
  font-size: 12px;
  border-radius: 2px;
}
.endpoint button.connected {
  background: silver;
}
.title {
  padding-bottom: 50px;
}
.subtitle {
  padding: 10px;
  font-family: Menlo, monaco, Courier;
  font-size: 12px;
}
.title a {
  color: burlywood;
  font-family: Menlo, monaco, Courier;
  font-size: 12px;
  padding: 10px;
  display: block;
}
.title img {
  max-width: 500px;
  margin: 20px;
}

</style>
<link href="bottle://fa/css/all.css" rel="stylesheet">
<script id="logs-template" type="text/x-handlebars-template">
<div class='row'>
  <div class='col flexible'>
    <div class='endpoints_header'>
      <div>Events</div>
    </div>
    {{#each items}}
      {{content}}
    {{/each}}
  </div>
</div>
</script>
<script id="item-template" type="text/x-handlebars-template">
<div class='row'>
  <div class='col flexible'>
    <div class='center title'>
      <h1>{{name}}</h1>
      <div class='subtitle'>bit://{{address}}</div>
      <div>{{description}}</div>
      {{#if url}}
      <a target='_blank' href='{{url}}'>{{url}}</a>
      {{/if}}
      {{#if image}}
        <div><img src='{{image}}'></div>
      {{/if}}
    </div>
    <div class='endpoints_header'>
      <h2>endpoints</h2>
      <div>Select an endpoint to connect to</div>
    </div>
    {{#each items}}
      <pre>bit://{{address}}{{path}}</pre>
      {{#each routes}}
      <div class='endpoint'>
        <div class='url'>{{val}}</div>
        <div class='flexible'></div>
        {{#if connected}}
          <button class='connected' data-address='{{key}}' data-path='{{path}}'>Connected</button>
        {{else}}
          <button data-address='{{key}}' data-path='{{path}}'>Connect</button>
        {{/if}}
      </div>
      {{/each}}
    {{/each}}
  </div>
</div>
</script>
<script>
const fs = require('fs');
const path = require('path');
const Handlebars = require('handlebars');
const {remote, ipcRenderer} = require('electron');
const dirname = remote.app.getAppPath();
const userPath = remote.app.getPath("userData");
const templates = {
  item: Handlebars.compile(document.querySelector("#item-template").innerHTML),
  log: Handlebars.compile(document.querySelector("#logs-template").innerHTML)
}
const get = function(query, cb) {
  var b64 = btoa(JSON.stringify(query));
  var url = "https://babel.bitdb.network/q/1DHDifPvtPgKFPZMRSxmVHhiPvFmxZwbfh/" + b64;
  var header = { headers: { key: "1KJPjd3p8khnWZTkjhDYnywLB2yE1w5BmU" } };
    fetch(url, header).then(function(r) {
    return r.json()
  }).then(function(r) {
    cb(r)
  })
}
var bitcom = {}
var meta = {}
var logs = [];
var state;
const log = function(address) {
  return new Promise(function(resolve, reject) {
    get({
      v: 3,
      q: {
        find: {
          "out.b0": { "op": 106 },
          "out.s1": address,
        },
        limit: 100
      },
      r: {
        f: "[.[] | { sender: .in[0].e.a, out: .out }]"
      }
    }, function(res) {
      logs = [].concat(res.u).concat(res.c)
      resolve()
    })
  })
}
const route = {
  enable: function(address) {
    return new Promise(function(resolve, reject) {
      get({
        v: 3,
        q: {
          find: {
            "out.b0": { "op": 106 },
            "out.s1": "$",
            "in.e.a": address
          }
        },
        r: {
          f: "[.[] | { sender: .in[0].e.a, out: .out }]"
        }
      }, function(res) {
        let r = [].concat(res.u).concat(res.c)
        r.forEach(function(item) {
          if (item.out[0].s2 === 'route' && item.out[0].s3 === 'enable') {
            let routePath = item.out[0].s4;
            if (!bitcom[address]) {
              bitcom[address] = {}
            }
            if (!bitcom[address][routePath]) {
              bitcom[address][routePath] = {}
            }
          } else if ((item.out[0].s2 === 'echo' || item.out[0].s2 === 'cat') && (item.out[0].s4 === 'to' || item.out[0].s4 === '>') && item.out[0].s5) {
            let filename = item.out[0].s5
            if (!meta[filename]) {
              if (filename === 'name') {
                meta[filename] = item.out[0].s3;
              } else if (filename === 'description') {
                meta[filename] = item.out[0].s3;
              } else if (filename === 'url') {
                meta[filename] = item.out[0].s3;
              } else if (filename === 'image') {
                meta[filename] = item.out[0].s3;
              }
            }
          }
        })
        resolve();
      })
    })
  },
  add: function(address) {
    return new Promise(function(resolve, reject) {
      get({
        v: 3,
        q: {
          find: {
            "out.b0": { "op": 106 },
            "out.s1": "$",
            "out.s2": "route",
            "out.s3": "add",
            "out.s4": address
          }
        },
        r: {
          f: "[.[] | { sender: .in[0].e.a, out: .out }]"
        }
      }, function(res) {
        let r = [].concat(res.u).concat(res.c)
        r.reverse().forEach(function(item) {
          let routePath = item.out[0].s5;
          let endpoint = item.out[0].s6;
          if (bitcom[address] && bitcom[address][routePath]) {
            bitcom[address][routePath][item.sender] = endpoint;
          }
        })
        resolve();
      })
    })
  }
}
const add = function(address, path) {
  let router = remote.getGlobal("router")
  let bc = {};
  bc[meta.address] = {}
  bc[meta.address][path] = {}
  bc[meta.address][path][address] = bitcom[meta.address][path][address];
  router.add(bc, redirect)
}
const render = function() {
  let items = [];
  Object.keys(bitcom).forEach(function(key) {
    let routes = bitcom[key];
    Object.keys(routes).forEach(function(routeKey) {
      let routeMapping = routes[routeKey];
      let i = [];
      Object.keys(routeMapping).forEach(function(routeAddress) {
        let routeEndpoint = routeMapping[routeAddress];
        let connected = (state && state[routeKey] && state[routeKey][routeAddress] ? true : false);
        i.push({
          path: routeKey,
          connected: connected,
          key: routeAddress,
          val: routeEndpoint
        })
      })
      items.push({
        address: meta.address,
        path: routeKey,
        routes: i
      })
    })
  })
  let str = templates.item({
    name: (meta.name ? meta.name : meta.address),
    address: meta.address,
    description: (meta.description ? meta.description : ""),
    url: (meta.url ? meta.url : null),
    items: items,
    image: (meta.image ? meta.image : null)
  })
  document.querySelector(".slot").innerHTML = str;
}
var params = (new URL(document.location)).searchParams;
var address = params.get("address");
var redirect = params.get("redirect");
document.addEventListener("DOMContentLoaded", async function(e) {
  meta.address = address
  let router = remote.getGlobal("router")
  state = router.get(address)
  await route.enable(address)
  await route.add(address)
  render();
  document.querySelectorAll("button").forEach(function(el) {
    el.addEventListener("click", function(ev) {
      add(el.dataset.address, el.dataset.path)

      document.querySelectorAll("button").forEach(function(el2) {
        if (el !== el2) {
          el2.classList.remove("connected")
          el2.innerHTML = "Connect";
        }
      })
      el.classList.toggle("connected");
      if (el.classList.contains("connected")) {
        el.innerHTML = "Connected";
      } else {
        el.innerHTML = "Connect";
      }
      ev.preventDefault();
    })
  })
});
</script>
</head>
<body>
<div class='container'>
<div class='slot'>
</div>
<div class='logs'>
</div>
</div>
</body>
</html>
$(LCOV) -a $@ $(LCOV_OPTS) -o $@
# Distributed under the MIT software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

# Pattern rule to print variables, e.g. make print-top_srcdir
print-%: FORCE
	@echo '$*'='$($*)'

ACLOCAL_AMFLAGS = -I build-aux/m4
SUBDIRS = src
if ENABLE_MAN
SUBDIRS += doc/man
endif
.PHONY: deploy FORCE
.INTERMEDIATE: $(OSX_TEMP_ISO) $(COVERAGE_INFO)

export PYTHONPATH

if BUILD_BITCOIN_LIBS
pkgconfigdir = $(libdir)/pkgconfig
pkgconfig_DATA = libbitcoinconsensus.pc
endif

BITCOIND_BIN=$(top_builddir)/src/$(BITCOIN_DAEMON_NAME)$(EXEEXT)
BITCOIN_QT_BIN=$(top_builddir)/src/qt/$(BITCOIN_GUI_NAME)$(EXEEXT)
BITCOIN_CLI_BIN=$(top_builddir)/src/$(BITCOIN_CLI_NAME)$(EXEEXT)
BITCOIN_TX_BIN=$(top_builddir)/src/$(BITCOIN_TX_NAME)$(EXEEXT)
BITCOIN_UTIL_BIN=$(top_builddir)/src/$(BITCOIN_UTIL_NAME)$(EXEEXT)
BITCOIN_WALLET_BIN=$(top_builddir)/src/$(BITCOIN_WALLET_TOOL_NAME)$(EXEEXT)
BITCOIN_NODE_BIN=$(top_builddir)/src/$(BITCOIN_MP_NODE_NAME)$(EXEEXT)
BITCOIN_GUI_BIN=$(top_builddir)/src/$(BITCOIN_MP_GUI_NAME)$(EXEEXT)
BITCOIN_WIN_INSTALLER=$(PACKAGE)-$(PACKAGE_VERSION)-win64-setup$(EXEEXT)

empty :=
space := $(empty) $(empty)

OSX_APP=Bitcoin-Qt.app
OSX_VOLNAME = $(subst $(space),-,$(PACKAGE_NAME))
OSX_DMG = $(OSX_VOLNAME).dmg
OSX_TEMP_ISO = $(OSX_DMG:.dmg=).temp.iso
OSX_BACKGROUND_IMAGE=$(top_srcdir)/contrib/macdeploy/background.tiff
OSX_DEPLOY_SCRIPT=$(top_srcdir)/contrib/macdeploy/macdeployqtplus
OSX_INSTALLER_ICONS=$(top_srcdir)/src/qt/res/icons/bitcoin.icns
OSX_PLIST=$(top_builddir)/share/qt/Info.plist #not installed

DIST_CONTRIB = \
	       $(top_srcdir)/test/sanitizer_suppressions/lsan \
	       $(top_srcdir)/test/sanitizer_suppressions/tsan \
	       $(top_srcdir)/test/sanitizer_suppressions/ubsan \
	       $(top_srcdir)/contrib/linearize/linearize-data.py \
	       $(top_srcdir)/contrib/linearize/linearize-hashes.py

DIST_SHARE = \
  $(top_srcdir)/share/genbuild.sh \
  $(top_srcdir)/share/rpcauth

BIN_CHECKS=$(top_srcdir)/contrib/devtools/symbol-check.py \
           $(top_srcdir)/contrib/devtools/security-check.py \
           $(top_srcdir)/contrib/devtools/utils.py

WINDOWS_PACKAGING = $(top_srcdir)/share/pixmaps/bitcoin.ico \
  $(top_srcdir)/share/pixmaps/nsis-header.bmp \
  $(top_srcdir)/share/pixmaps/nsis-wizard.bmp \
  $(top_srcdir)/doc/README_windows.txt

OSX_PACKAGING = $(OSX_DEPLOY_SCRIPT) $(OSX_INSTALLER_ICONS) \
  $(top_srcdir)/contrib/macdeploy/detached-sig-apply.sh \
  $(top_srcdir)/contrib/macdeploy/detached-sig-create.sh

COVERAGE_INFO = $(COV_TOOL_WRAPPER) baseline.info \
  test_bitcoin_filtered.info total_coverage.info \
  baseline_filtered.info functional_test.info functional_test_filtered.info \
  test_bitcoin_coverage.info test_bitcoin.info fuzz.info fuzz_filtered.info fuzz_coverage.info

dist-hook:
	-$(GIT) archive --format=tar HEAD -- src/clientversion.cpp | $(AMTAR) -C $(top_distdir) -xf -

if TARGET_WINDOWS
$(BITCOIN_WIN_INSTALLER): all-recursive
	$(MKDIR_P) $(top_builddir)/release
	STRIPPROG="$(STRIP)" $(INSTALL_STRIP_PROGRAM) $(BITCOIND_BIN) $(top_builddir)/release
	STRIPPROG="$(STRIP)" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_QT_BIN) $(top_builddir)/release
	STRIPPROG="$(STRIP)" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_CLI_BIN) $(top_builddir)/release
	STRIPPROG="$(STRIP)" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_TX_BIN) $(top_builddir)/release
	STRIPPROG="$(STRIP)" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_WALLET_BIN) $(top_builddir)/release
	STRIPPROG="$(STRIP)" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_UTIL_BIN) $(top_builddir)/release
	@test -f $(MAKENSIS) && echo 'OutFile "$@"' | cat $(top_builddir)/share/setup.nsi - | $(MAKENSIS) -V2 - || \
	  echo error: could not build $@
	@echo built $@

deploy: $(BITCOIN_WIN_INSTALLER)
endif

if TARGET_DARWIN
$(OSX_APP)/Contents/PkgInfo:
	$(MKDIR_P) $(@D)
	@echo "APPL????" > $@

$(OSX_APP)/Contents/Resources/empty.lproj:
	$(MKDIR_P) $(@D)
	@touch $@

$(OSX_APP)/Contents/Info.plist: $(OSX_PLIST)
	$(MKDIR_P) $(@D)
	$(INSTALL_DATA) $< $@

$(OSX_APP)/Contents/Resources/bitcoin.icns: $(OSX_INSTALLER_ICONS)
	$(MKDIR_P) $(@D)
	$(INSTALL_DATA) $< $@

$(OSX_APP)/Contents/MacOS/Bitcoin-Qt: all-recursive
	$(MKDIR_P) $(@D)
	STRIPPROG="$(STRIP)" $(INSTALL_STRIP_PROGRAM)  $(BITCOIN_QT_BIN) $@

$(OSX_APP)/Contents/Resources/Base.lproj/InfoPlist.strings:
	$(MKDIR_P) $(@D)
	echo '{	CFBundleDisplayName = "$(PACKAGE_NAME)"; CFBundleName = "$(PACKAGE_NAME)"; }' > $@

OSX_APP_BUILT=$(OSX_APP)/Contents/PkgInfo $(OSX_APP)/Contents/Resources/empty.lproj \
  $(OSX_APP)/Contents/Resources/bitcoin.icns $(OSX_APP)/Contents/Info.plist \
  $(OSX_APP)/Contents/MacOS/Bitcoin-Qt $(OSX_APP)/Contents/Resources/Base.lproj/InfoPlist.strings

osx_volname:
	echo $(OSX_VOLNAME) >$@

if BUILD_DARWIN
$(OSX_DMG): $(OSX_APP_BUILT) $(OSX_PACKAGING)
	$(PYTHON) $(OSX_DEPLOY_SCRIPT) $(OSX_APP) $(OSX_VOLNAME) -translations-dir=$(QT_TRANSLATION_DIR) -dmg

deploydir: $(OSX_DMG)
else !BUILD_DARWIN
APP_DIST_DIR=$(top_builddir)/dist
APP_DIST_EXTRAS=$(APP_DIST_DIR)/.background/background.tiff $(APP_DIST_DIR)/.DS_Store $(APP_DIST_DIR)/Applications

$(APP_DIST_DIR)/Applications:
	@rm -f $@
	@cd $(@D); $(LN_S) /Applications $(@F)

$(APP_DIST_EXTRAS): $(APP_DIST_DIR)/$(OSX_APP)/Contents/MacOS/Bitcoin-Qt

$(OSX_TEMP_ISO): $(APP_DIST_EXTRAS)
	$(XORRISOFS) -D -l -V "$(OSX_VOLNAME)" -no-pad -r -dir-mode 0755 -o $@ $(APP_DIST_DIR) -- $(if $(SOURCE_DATE_EPOCH),-volume_date all_file_dates =$(SOURCE_DATE_EPOCH))

$(OSX_DMG): $(OSX_TEMP_ISO)
	$(DMG) dmg "$<" "$@"

$(APP_DIST_DIR)/.background/background.tiff:
	$(MKDIR_P) $(@D)
	cp $(OSX_BACKGROUND_IMAGE) $@

$(APP_DIST_DIR)/$(OSX_APP)/Contents/MacOS/Bitcoin-Qt: $(OSX_APP_BUILT) $(OSX_PACKAGING)
	INSTALLNAMETOOL=$(INSTALLNAMETOOL) OTOOL=$(OTOOL) STRIP=$(STRIP) $(PYTHON) $(OSX_DEPLOY_SCRIPT) $(OSX_APP) $(OSX_VOLNAME) -translations-dir=$(QT_TRANSLATION_DIR)

deploydir: $(APP_DIST_EXTRAS)
endif !BUILD_DARWIN

appbundle: $(OSX_APP_BUILT)
deploy: $(OSX_DMG)
endif

$(BITCOIN_QT_BIN): FORCE
	$(MAKE) -C src qt/$(@F)

$(BITCOIND_BIN): FORCE
	$(MAKE) -C src $(@F)

$(BITCOIN_CLI_BIN): FORCE
	$(MAKE) -C src $(@F)

$(BITCOIN_TX_BIN): FORCE
	$(MAKE) -C src $(@F)

$(BITCOIN_UTIL_BIN): FORCE
	$(MAKE) -C src $(@F)

$(BITCOIN_WALLET_BIN): FORCE
	$(MAKE) -C src $(@F)

$(BITCOIN_NODE_BIN): FORCE
	$(MAKE) -C src $(@F)

$(BITCOIN_GUI_BIN): FORCE
	$(MAKE) -C src $(@F)

if USE_LCOV
LCOV_FILTER_PATTERN = \
	-p "/usr/local/" \
	-p "/usr/include/" \
	-p "/usr/lib/" \
	-p "/usr/lib64/" \
	-p "src/leveldb/" \
	-p "src/crc32c/" \
	-p "src/bench/" \
	-p "src/univalue" \
	-p "src/crypto/ctaes" \
	-p "src/minisketch" \
	-p "src/secp256k1" \
	-p "depends"

DIR_FUZZ_SEED_CORPUS ?= qa-assets/fuzz_seed_corpus

$(COV_TOOL_WRAPPER):
	@echo 'exec $(COV_TOOL) "$$@"' > $(COV_TOOL_WRAPPER)
	@chmod +x $(COV_TOOL_WRAPPER)

baseline.info: $(COV_TOOL_WRAPPER)
	$(LCOV) -c -i -d $(abs_builddir)/src -o $@

baseline_filtered.info: baseline.info
	$(abs_builddir)/contrib/filter-lcov.py $(LCOV_FILTER_PATTERN) $< $@
	$(LCOV) -a $@ $(LCOV_OPTS) -o $@

fuzz.info: baseline_filtered.info
	@TIMEOUT=15 test/fuzz/test_runner.py $(DIR_FUZZ_SEED_CORPUS) -l DEBUG
	$(LCOV) -c $(LCOV_OPTS) -d $(abs_builddir)/src --t fuzz-tests -o $@
	$(LCOV) -z $(LCOV_OPTS) -d $(abs_builddir)/src

fuzz_filtered.info: fuzz.info
	$(abs_builddir)/contrib/filter-lcov.py $(LCOV_FILTER_PATTERN) $< $@
	$(LCOV) -a $@ $(LCOV_OPTS) -o $@

test_bitcoin.info: baseline_filtered.info
	$(MAKE) -C src/ check
	$(LCOV) -c $(LCOV_OPTS) -d $(abs_builddir)/src -t test_bitcoin -o $@
	$(LCOV) -z $(LCOV_OPTS) -d $(abs_builddir)/src

test_bitcoin_filtered.info: test_bitcoin.info
	$(abs_builddir)/contrib/filter-lcov.py $(LCOV_FILTER_PATTERN) $< $@

functional_test.info: test_bitcoin_filtered.info
	@TIMEOUT=15 test/functional/test_runner.py $(EXTENDED_FUNCTIONAL_TESTS)
	$(LCOV) -c $(LCOV_OPTS) -d $(abs_builddir)/src --t functional-tests -o $@
	$(LCOV) -z $(LCOV_OPTS) -d $(abs_builddir)/src

functional_test_filtered.info: functional_test.info
	$(abs_builddir)/contrib/filter-lcov.py $(LCOV_FILTER_PATTERN) $< $@
	$(LCOV) -a $@ $(LCOV_OPTS) -o $@

fuzz_coverage.info: fuzz_filtered.info
	$(LCOV) -a $(LCOV_OPTS) baseline_filtered.info -a fuzz_filtered.info -o $@ | $(GREP) "\%" | $(AWK) '{ print substr($$3,2,50) "/" $$5 }' > coverage_percent.txt

test_bitcoin_coverage.info: baseline_filtered.info test_bitcoin_filtered.info
	$(LCOV) -a $(LCOV_OPTS) baseline_filtered.info -a test_bitcoin_filtered.info -o $@

total_coverage.info: test_bitcoin_filtered.info functional_test_filtered.info
	$(LCOV) -a $(LCOV_OPTS) baseline_filtered.info -a test_bitcoin_filtered.info -a functional_test_filtered.info -o $@ | $(GREP) "\%" | $(AWK) '{ print substr($$3,2,50) "/" $$5 }' > coverage_percent.txt

fuzz.coverage/.dirstamp: fuzz_coverage.info
	$(GENHTML) -s $(LCOV_OPTS) $< -o $(@D)
	@touch $@

test_bitcoin.coverage/.dirstamp:  test_bitcoin_coverage.info
	$(GENHTML) -s $(LCOV_OPTS) $< -o $(@D)
	@touch $@

total.coverage/.dirstamp: total_coverage.info
	$(GENHTML) -s $(LCOV_OPTS) $< -o $(@D)
	@touch $@

cov_fuzz: fuzz.coverage/.dirstamp

cov: test_bitcoin.coverage/.dirstamp total.coverage/.dirstamp

endif

dist_noinst_SCRIPTS = autogen.sh

EXTRA_DIST = $(DIST_SHARE) $(DIST_CONTRIB) $(WINDOWS_PACKAGING) $(OSX_PACKAGING) $(BIN_CHECKS)

EXTRA_DIST += \
    test/functional \
    test/fuzz

EXTRA_DIST += \
    test/util/test_runner.py \
    test/util/data/bitcoin-util-test.json \
    test/util/data/blanktxv1.hex \
    test/util/data/blanktxv1.json \
    test/util/data/blanktxv2.hex \
    test/util/data/blanktxv2.json \
    test/util/data/tt-delin1-out.hex \
    test/util/data/tt-delin1-out.json \
    test/util/data/tt-delout1-out.hex \
    test/util/data/tt-delout1-out.json \
    test/util/data/tt-locktime317000-out.hex \
    test/util/data/tt-locktime317000-out.json \
    test/util/data/tx394b54bb.hex \
    test/util/data/txcreate1.hex \
    test/util/data/txcreate1.json \
    test/util/data/txcreate2.hex \
    test/util/data/txcreate2.json \
    test/util/data/txcreatedata1.hex \
    test/util/data/txcreatedata1.json \
    test/util/data/txcreatedata2.hex \
    test/util/data/txcreatedata2.json \
    test/util/data/txcreatedata_seq0.hex \
    test/util/data/txcreatedata_seq0.json \
    test/util/data/txcreatedata_seq1.hex \
    test/util/data/txcreatedata_seq1.json \
    test/util/data/txcreatemultisig1.hex \
    test/util/data/txcreatemultisig1.json \
    test/util/data/txcreatemultisig2.hex \
    test/util/data/txcreatemultisig2.json \
    test/util/data/txcreatemultisig3.hex \
    test/util/data/txcreatemultisig3.json \
    test/util/data/txcreatemultisig4.hex \
    test/util/data/txcreatemultisig4.json \
    test/util/data/txcreatemultisig5.json \
    test/util/data/txcreateoutpubkey1.hex \
    test/util/data/txcreateoutpubkey1.json \
    test/util/data/txcreateoutpubkey2.hex \
    test/util/data/txcreateoutpubkey2.json \
    test/util/data/txcreateoutpubkey3.hex \
    test/util/data/txcreateoutpubkey3.json \
    test/util/data/txcreatescript1.hex \
    test/util/data/txcreatescript1.json \
    test/util/data/txcreatescript2.hex \
    test/util/data/txcreatescript2.json \
    test/util/data/txcreatescript3.hex \
    test/util/data/txcreatescript3.json \
    test/util/data/txcreatescript4.hex \
    test/util/data/txcreatescript4.json \
    test/util/data/txcreatescript5.hex \
    test/util/data/txcreatescript6.hex \
    test/util/data/txcreatesignsegwit1.hex \
    test/util/data/txcreatesignv1.hex \
    test/util/data/txcreatesignv1.json \
    test/util/data/txcreatesignv2.hex \
    test/util/rpcauth-test.py

CLEANFILES = $(OSX_DMG) $(BITCOIN_WIN_INSTALLER)

DISTCHECK_CONFIGURE_FLAGS = --enable-man

doc/doxygen/.stamp: doc/Doxyfile FORCE
	$(MKDIR_P) $(@D)
	$(DOXYGEN) $^
	$(AM_V_at) touch $@

if HAVE_DOXYGEN
docs: doc/doxygen/.stamp
else
docs:
	@echo "error: doxygen not found"
endif

clean-docs:
	rm -rf doc/doxygen

clean-local: clean-docs
	rm -rf coverage_percent.txt test_bitcoin.coverage/ total.coverage/ fuzz.coverage/ test/tmp/ cache/ $(OSX_APP)
	rm -rf test/functional/__pycache__ test/functional/test_framework/__pycache__ test/cache share/rpcauth/__pycache__
	rm -rf osx_volname dist/

test-security-check:
if TARGET_DARWIN
	$(AM_V_at) CC='$(CC)' CFLAGS='$(CFLAGS)' CPPFLAGS='$(CPPFLAGS)' LDFLAGS='$(LDFLAGS)' $(PYTHON) $(top_srcdir)/contrib/devtools/test-security-check.py TestSecurityChecks.test_MACHO
	$(AM_V_at) CC='$(CC)' CFLAGS='$(CFLAGS)' CPPFLAGS='$(CPPFLAGS)' LDFLAGS='$(LDFLAGS)' $(PYTHON) $(top_srcdir)/contrib/devtools/test-symbol-check.py TestSymbolChecks.test_MACHO
endif
if TARGET_WINDOWS
	$(AM_V_at) CC='$(CC)' CFLAGS='$(CFLAGS)' CPPFLAGS='$(CPPFLAGS)' LDFLAGS='$(LDFLAGS)' $(PYTHON) $(top_srcdir)/contrib/devtools/test-security-check.py TestSecurityChecks.test_PE
	$(AM_V_at) CC='$(CC)' CFLAGS='$(CFLAGS)' CPPFLAGS='$(CPPFLAGS)' LDFLAGS='$(LDFLAGS)' $(PYTHON) $(top_srcdir)/contrib/devtools/test-symbol-check.py TestSymbolChecks.test_PE
endif
if TARGET_LINUX
	$(AM_V_at) CC='$(CC)' CFLAGS='$(CFLAGS)' CPPFLAGS='$(CPPFLAGS)' LDFLAGS='$(LDFLAGS)' $(PYTHON) $(top_srcdir)/contrib/devtools/test-security-check.py TestSecurityChecks.test_ELF
	$(AM_V_at) CC='$(CC)' CFLAGS='$(CFLAGS)' CPPFLAGS='$(CPPFLAGS)' LDFLAGS='$(LDFLAGS)' $(PYTHON) $(top_srcdir)/contrib/devtools/test-symbol-check.py TestSymbolChecks.test_ELF
endif


